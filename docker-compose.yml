services:
  app:
    build:
      context: .
    container_name: django_app
    env_file:
      - .env
    ports:
      - "8001:8000"
    volumes:
      - .:/app
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  db:
    image: postgres:16.0-alpine3.17
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - my_db:$PGDATA
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2.4-alpine
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  celery:
    build:
      context: .
    container_name: celery_worker
    restart: always
    env_file:
      - .env
    depends_on:
      app:
        condition: service_started
      redis:
        condition: service_healthy
    command: celery -A library worker -l INFO

  celery-beat:
    build:
      context: .
    container_name: celery_beat
    restart: always
    env_file:
      - .env
    depends_on:
      - celery
    command: celery -A library beat -l INFO

volumes:
  my_db:
